/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* The * is a symbol for the universal selector - universal selector will select each and every element on the page and apply the changes to it.*/

* {

    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* this changes box model so padding and borers are no longer added*/

}
/* This performs a basic reset -  in order to make different browsers render in the exact same way */

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    /* means it's 1.7 times bigger than the predefined line height*/
    color: #777;
    padding: 30px;
}


/*********** header section ************/

.header {
    height: 95vh;
    /* vh is the view port height. so 95 vh is 95% of the viewport height */
    background-image: linear-gradient(
        to right bottom, 
        #7ed56fd3, 
        #28b485d3), 
        url(../img/hero.jpg);
    /* we need to use background image for both the image and the gradient. We can set them both in the same property by using a comma*/
    background-size: cover;
    /* Cover scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains. */
    background-position: top;
    /* will  make sure the image stays at the top*/
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%)
    /* We use this to cut a shape out of our header image, you can use % px or view port height*/
}

.logo-box {
    position: absolute;
    top: 70px;
    left: 70px;
    /* This is the container holding the image*/
}

.logo {
    height: 35px;
    -webkit-transform-style: preserve-3d;
    /* This is the actual logo image */
}

.logo:hover {
    animation: moveInRight 1s ease-out;
    /* we can reuse animations that are in the css anywhere in the css*/
}

.text-box {
     /* Container thats holding on to the header text we need this to position the header. In the tutorial we added this after putting the text in here. */
     position: absolute;
     top: 40%;
     left: 50%;
     /* transform and translate will help get our text box in the middle. */
     transform: translate(-50%, -50%);
     text-align: center;
     /*The button doesn't appear in the center so we use text align to put the button in the center. It is still an inline element even though we specified it to display as an inline block down in the btn class.*/

}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden;
    /* The element was a little shaky as far as animation so this fixes the shaking and makes the animation smooth. We use it on this container since it is holding the animation */

    margin-bottom: 60px;
    /* Margin bottom on this element is going to give the cta button some space in the header.*/
}

.heading-primary-main {
    /*to manipulate this text we need to display it as a block element. block elements block the entire width that they have available. They also create line breaks after and before them. A span element by default is an inline element so it's just like text*/
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    /* we need name and duration to get the animation to work. we specify what we want the animation to do in the keyframes down below
    
    example: 
        60% {
        transform: rotate(120deg);
    }
     This will make the animation rotate towards the middle of the animation.
    */
    animation-name: moveInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
    /* https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function/
    
    ease-in: starts out slow and then accelerates over time
    ease-out: starts out quick and slows over time

    */


    /*
    animation-delay: 1s;
    This delays the animation

    animation-iteration-count: 3;
    This will make the animation repeat this is set to repeat it 3 times

    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17px;
    text-indent: .4em;
    animation: moveInRight 3s ease-out;
   

}

/* we use @keyframes for the animation*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    /* this is the point before the animation. */
    /* in between we can specify at what point using percentage that we want something else in the animation to happen */
    80% {
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
/* this is the point after the animation.*/

}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(30px);
    }
   
    100% {
        opacity: 1;
        transform: translate(0);
    }
}


.btn:link, 
.btn:visited {
    /* link is a pseudo class. A pseudo class is a special state of a selector. we use pseudo classes to style an element under a special condition ie hover, click, select last child etc. Link is a special state of a selector when it is an anchor element so that the button will function as a link.*/

    /* Visited is a pseudo class. This is the state when the user has already clicked on the button once before and then sees the button again. As default links are blue and then turn purple once they are clicked on. We use link and visited pseudo classes to restyle the default settings*/

    /*We want the visited state to look like the normal state so so we put both pseudo classes together. */

    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    /* this link is an inline element so we use display:  inline block to make it behave as a block element. with block elements you can manipulate: margin, padding, height, width with inline elements you can only manipulate: margin-left, margin-right, padding-left, padding-right   */

    border-radius: 100px;
    /* This turns the square button into a rounded button*/

    transition:  all .2s;
    /* transition specifies what properties we want to animate. saying all means we want all of the properties animated. so we don't have to specify hover, active, etc. Transition needs to go under the initial state for the animations to work.*/

    position: relative;
    /*This gives our btn::after pseudo element a reference point so that we can position it below. We do have another position relative in the header but this one is closer to the other so it will use this relative to position itself. */
}

.btn:hover {
    transform: translateY( -3px);
    /* We want the button to change states and move up on hover so we will use the pseudo element of hover on this button. Transform will help us animate the state of the button.*/
    box-shadow: 0 10px 20px rgba(0,0,0.2);
}

.btn:active {
    /*Active pseudo class controls what happens when we click the button */
    transform: translateY(1px);
    box-shadow: 0 5px 10px rgba(0,0,0.2);
}

.btn-white {
    background-color: white;
    color: #777;
}

/* after pseudo element adds elements we can style after selecting that element. for example what happens after something. we want to make the button appear from behind the button and then disappear back behind the element again.  */

.btn::after {
    content: "";
    display: inline-block;
    /* for an after pseudo element to appear on the page you need to use the content property. That's always necessary. Even if there's nothing inside of it. Same with display there always has to be a display property in the after pseudo element.*/
    height: 100%;
    width: 100%;
    border-radius: 100px;
    /* we want it to look the same as the button before. The after pseudo element is treated like a child of the button So if we say we want a height and width to be 100% it takes the characteristics from the button we already styled.*/
    position: absolute;
    top: 0;
    left: 0;
    /*before we put in the absolute position the after button we just created looks like it's a part of the original. This will separate it. This position, top, and left, uses the first relative position that it can find.*/
    z-index: -1;
    /* positions this button behind our main button */
    transition: all .4s;
    /*this will make our button animate and we always put the animation on the initial state of the button.*/

}

.btn-white::after {
    background-color: white;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    /* transform: scale(1.5); scale will increase the element size the numbers will multiple the size for instance size 2 will double the size and 3 will triple the size. scale will increase the size uniformly or you can use scaleX and scaleY to scale accordingly*/
    opacity: 0;
    /*This is a trick for fading something out*/
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /*.75s is an animation delay.*/
    animation-fill-mode: backwards;
    /* before we added in this animation fill mode you can see the button before the animation starts. We don't want that so what this does is makes the styles 0% before animation starts. So the animation on moveInBottom that we specified earlier won't start right away*/
}