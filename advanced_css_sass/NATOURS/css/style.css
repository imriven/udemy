/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* The * is a symbol for the universal selector - universal selector will select each and every element on the page and apply the changes to it.*/

* {

    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* this changes box model so padding and borers are no longer added*/

}
/* This performs a basic reset -  in order to make different browsers render in the exact same way */

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    /* means it's 1.7 times bigger than the predefined line height*/
    color: #777;
    padding: 30px;
}


/*********** header section ************/

.header {
    height: 95vh;
    /* vh is the view port height. so 95 vh is 95% of the viewport height */
    background-image: linear-gradient(
        to right bottom, 
        #7ed56fd3, 
        #28b485d3), 
        url(../img/hero.jpg);
    /* we need to use background image for both the image and the gradient. We can set them both in the same property by using a comma*/
    background-size: cover;
    /* Cover scales the image as large as possible without stretching the image. If the proportions of the image differ from the element, it is cropped either vertically or horizontally so that no empty space remains. */
    background-position: top;
    /* will  make sure the image stays at the top*/
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%)
    /* We use this to cut a shape out of our header image, you can use % px or view port height*/
}

.logo-box {
    position: absolute;
    top: 70px;
    left: 70px;
    /* This is the container holding the image*/
}

.logo {
    height: 35px;
    /* This is the actual logo image */
}

.logo:hover {
    animation: moveInRight 3s ease-out;
    /* we can reuse animations that are in the css anywhere in the css*/
}

.text-box {
     /* Container thats holding on to the header text we need this to position the header. In the tutorial we added this after putting the text in here. */
     position: absolute;
     top: 40%;
     left: 50%;
     /* transform and translate will help get our text box in the middle. */
     transform: translate(-50%, -50%)

}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    backface-visibility: hidden;
    /* The element was a little shaky as far as animation so this fixes the shaking and makes the animation smooth. We use it on this container since it is holding the animation */
}

.heading-primary-main {
    /*to manipulate this text we need to display it as a block element. block elements block the entire width that they have available. They also create line breaks after and before them. A span element by default is an inline element so it's just like text*/
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;
    /* we need name and duration to get the animation to work. we specify what we want the animation to do in the keyframes down below
    
    example: 
        60% {
        transform: rotate(120deg);
    }
     This will make the animation rotate towards the middle of the animation.
    */
    animation-name: moveInLeft;
    animation-duration: 3s;
    animation-timing-function: ease-out;
    /* https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function/
    
    ease-in: starts out slow and then accelerates over time
    ease-out: starts out quick and slows over time

    */


    /*
    animation-delay: 1s;
    This delays the animation

    animation-iteration-count: 3;
    This will make the animation repeat this is set to repeat it 3 times

    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17px;
    text-indent: .4em;
    animation: moveInRight 3s ease-out;
   

}

/* we use @keyframes for the animation*/
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px);
    }
    /* this is the point before the animation. */
    /* in between we can specify at what point using percentage that we want something else in the animation to happen */
    80% {
        transform: translateX(10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
/* this is the point after the animation.*/

}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px);
    }
    80% {
        transform: translateX(-10px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}